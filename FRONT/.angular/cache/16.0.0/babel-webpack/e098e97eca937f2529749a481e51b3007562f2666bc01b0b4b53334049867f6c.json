{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass LoginformService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(credentials) {\n    return this.http.get('../../../assets/users.json');\n  }\n  //!vamo a utilizar un manejador de errores en funcion de las peticiones http\n  //!muchas veces la respuesta de la bd/api puede contener errores. Por ello se utiliza catchError\n  handleError(error) {\n    //veremos si esta mal formulado el request o el problema esta en el back\n    if (error.status == 0) {\n      console.log(\"se ha producido un error\" + error.error);\n    }\n  }\n}\nLoginformService.ɵfac = function LoginformService_Factory(t) {\n  return new (t || LoginformService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginformService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginformService,\n  factory: LoginformService.ɵfac,\n  providedIn: 'root'\n});\nexport { LoginformService };","map":{"version":3,"names":["LoginformService","constructor","http","login","credentials","get","handleError","error","status","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/sarja/Desktop/Tecnicatura/AS con Angular/ArSalud/ISPC-2023/FRONT/src/app/services/auth/loginform.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { loguinRequest } from './loguinRequest';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { User } from './user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginformService {\n\n  constructor( private http: HttpClient) {\n\n  }\n\n  login( credentials: loguinRequest ): Observable<User> {\n    return this.http.get<User>('../../../assets/users.json')\n  }\n\n  //!vamo a utilizar un manejador de errores en funcion de las peticiones http\n  //!muchas veces la respuesta de la bd/api puede contener errores. Por ello se utiliza catchError\n\n  private handleError(error: HttpErrorResponse){\n    //veremos si esta mal formulado el request o el problema esta en el back\n    if(error.status == 0){\n      console.log(\"se ha producido un error\" + error.error)\n    }\n  }\n}\n"],"mappings":";;AAMA,MAGaA,gBAAgB;EAE3BC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAEzB;EAEAC,KAAKA,CAAEC,WAA0B;IAC/B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAO,4BAA4B,CAAC;EAC1D;EAEA;EACA;EAEQC,WAAWA,CAACC,KAAwB;IAC1C;IACA,IAAGA,KAAK,CAACC,MAAM,IAAI,CAAC,EAAC;MACnBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGH,KAAK,CAACA,KAAK,CAAC;;EAEzD;;AAlBWP,gBAAgB,C;mBAAhBA,gBAAgB,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBd,gBAAgB,C;SAAhBA,gBAAgB;EAAAe,OAAA,EAAhBf,gBAAgB,CAAAgB,IAAA;EAAAC,UAAA,EAFf;AAAM;SAEPjB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}